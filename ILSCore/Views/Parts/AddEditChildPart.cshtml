@{
    ViewData["Title"] = "AddEditChildPart";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script src="@Url.Content("~/assets/global/plugins/jquery.min.js")"></script>
<script src="@Url.Content("~/assets/global/scripts/app.min.js")"></script>


<script>

    var initAvailableParts = function () {
        var table = $('#gridAvailableParts');
        table.dataTable(
            {
                "language":
                {
                    "aria": {
                        "sortAscending": ": activate to sort column ascending",
                        "sortDescending": ": activate to sort column descending"
                    },
                    "emptyTable": "No data available in table",
                    "info": "Showing _START_ to _END_ of _TOTAL_ records",
                    "infoEmpty": "No records found",
                    "infoFiltered": "(filtered1 from _MAX_ total records)",
                    "lengthMenu": "Show _MENU_",
                    "search": "Search:",
                    "zeroRecords": "No matching records found",
                    "paginate": {
                        "previous": "Prev",
                        "next": "Next",
                        "last": "Last",
                        "first": "First"
                    }
                },
                "ajax": {
                    "url": "/Parts/GetGridDataForParts",
                    "type": "GET",
                    "datatype": "json",
                    "data": {
                        "id": '@ViewData["ParentId"].ToString()'
                    }
                },
                "bStateSave": true, // save datatable state(pagination, sort, etc) in cookie.

                "lengthMenu": [
                    [5, 15, 20, -1],
                    [5, 15, 20, "All"] // change per page values here
                ] ,
                // set the initial value
                "pageLength": 5,
                "pagingType": "bootstrap_full_number",
                "columnDefs": [
                    {  // set default column settings
                        'orderable': false,
                        'targets': [0]
                    },
                    {
                        "searchable": false,
                        "targets": [0]
                    },
                    {
                        'targets': 0,
                        'render': function (data, type, row, meta) {
                            if (type === 'display') {
                                data = '<label class="mt-checkbox mt-checkbox-single mt-checkbox-outline"><input type="checkbox" class="checkboxes" value="1" /> <span></span></label>';
                            }
                            return data;
                        }
                    }
                ],
                "order": [
                    [1, "asc"]
                ],
                "columns": [
                    { "data": null, "defaultContent": '' },
                    { "data": "partId", "name": "Id", "autoWidth": true },
                    { "data": "manufacturerName", "name": "Manufacturer Name", "autoWidth": true },
                    { "data": "description", "name": "Description", "autoWidth": true },
                    { "data": "partNumber", "name": "Part number", "autoWidth": true },
                    { "data": "partName", "name": "Part Name", "autoWidth": true },

                ]// set first column as a default sort by asc
            });
        table.on('change', 'tbody tr .checkboxes', function () {

            //$(this).parents('tr').toggleClass("active");

            if ($(this).is(":checked")) {
                $("input").prop("checked", false);
                $(this).prop("checked", true);
            }
        });
    }

    var initTblPartListGrid = function () {
        var table = $('#tblPartListGrid');
        table.dataTable(
            {
                "language":
                {
                    "aria": {
                        "sortAscending": ": activate to sort column ascending",
                        "sortDescending": ": activate to sort column descending"
                    },
                    "emptyTable": "No data available in table",
                    "info": "Showing _START_ to _END_ of _TOTAL_ records",
                    "infoEmpty": "No records found",
                    "infoFiltered": "(filtered1 from _MAX_ total records)",
                    "lengthMenu": "Show _MENU_",
                    "search": "Search:",
                    "zeroRecords": "No matching records found",
                    "paginate": {
                        "previous": "Prev",
                        "next": "Next",
                        "last": "Last",
                        "first": "First"
                    }
                },
                "ajax": {
                    "url": "/Parts/GetAssociatedPartsData",
                    "type": "GET",
                    "datatype": "json",
                    "data": {
                        "id": '@ViewData["ParentId"].ToString()'
                    }
                },
                "bStateSave": true, // save datatable state(pagination, sort, etc) in cookie.

                "lengthMenu": [
                    [5, 15, 20, -1],
                    [5, 15, 20, "All"] // change per page values here
                ],
                // set the initial value
                "pageLength": 5,
                "pagingType": "bootstrap_full_number",
                "columnDefs": [
                    {  // set default column settings
                        'orderable': false,
                        'targets': [0]
                    },
                    {
                        "searchable": false,
                        "targets": [0]
                    },
                    {
                        "className": "dt-right",

                    },
                    {
                        'targets': 0,
                        'render': function (data, type, row, meta) {
                            if (type === 'display') {
                                data = '<label class="mt-checkbox mt-checkbox-single mt-checkbox-outline"><input type="checkbox" class="checkboxes" value="1" /> <span></span></label>';
                            }
                            return data;
                        }
                    }
                ],
                "order": [
                    [1, "asc"]
                ],
                "columns": [
                    { "data": null, "defaultContent": '' },
                    { "data": "partId", "name": "Id", "autoWidth": true },
                    { "data": "manufacturerName", "name": "Manufacturer Name", "autoWidth": true },
                    { "data": "quantity", "name": "Description", "autoWidth": true },
                    { "data": "description", "name": "Part number", "autoWidth": true }
                ]// set first column as a default sort by asc
            });
        table.on('change', 'tbody tr .checkboxes', function () {

            //$(this).parents('tr').toggleClass("active");

            if ($(this).is(":checked")) {
                $("input").prop("checked", false);
                $(this).prop("checked", true);
            }
        });
    }

</script>


<div class="portlet red-sunglo box">

    <div class="portlet-title">
        <div class="caption">
            <span class="fa fa-cogs"> Parts List</span>
        </div>
    </div>

    <div class="portlet-body">
        <div class="table-toolbar">
            <div class="row">
                <div class="col-md-6">

                </div>
                @if (ViewBag.PageMode == "Edit")
                {
                    <div class="col-md-6">
                        <div class="btn-group pull-right">
                            <button id="btnModalShow" class="btn green btn-xs" data-toggle="modal" type="button">
                                Add New
                                <i class="fa fa-plus"></i>
                            </button>
                        </div>
                    </div>
                }
            </div>
        </div>
        <table class="table table-striped table-bordered table-hover table-checkable order-column" id="tblPartListGrid">
            <thead>
                <tr>
                    <th></th>
                    <th> Part Id </th>
                    <th> Manufacturer Name </th>
                    <th> Quantity </th>
                    <th> Description </th>
                </tr>
            </thead>
        </table>
    </div>
</div>


<div id="linkPart" class="modal fade" tabindex="-1" data-width="760">
    <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true"></button>
    </div>
    <div class="modal-body">
        @Html.Partial("AvailableParts")
    </div>
    <div class="modal-footer">
        <button type="submit" data-dismiss="modal" id="btnSubmitParts" class="btn green-meadow">
            <i class="glyphicon glyphicon-ok"> </i>Submit
        </button>
        <button type="submit" class="btn red" data-dismiss="modal">
            <i class="glyphicon glyphicon-remove"> </i>Cancel
        </button>
    </div>
</div>



<script>

$(document).ready(function () {
    (function ($) {
        $.fn.inputFilter = function (inputFilter) {
            return this.on("input keydown keyup mousedown mouseup select contextmenu drop", function () {
                if (inputFilter(this.value)) {
                    this.oldValue = this.value;
                    this.oldSelectionStart = this.selectionStart;
                    this.oldSelectionEnd = this.selectionEnd;
                } else if (this.hasOwnProperty("oldValue")) {
                    this.value = this.oldValue;
                    this.setSelectionRange(this.oldSelectionStart, this.oldSelectionEnd);
                } else {
                    this.value = "";
                }
            });
        };
    }(jQuery));



    initAvailableParts();
    initTblPartListGrid();

    $("#txtQuantity").inputFilter(function (value) {
        return /^\d*$/.test(value);    // Allow digits only, using a RegExp
    });

    toastr.options = {
        "closeButton": true,
        "debug": false,
        "positionClass": "toast-top-center",
        "onclick": null,
        "showDuration": "2000",
        "hideDuration": "2000",
        "timeOut": "1000",
        "extendedTimeOut": "1000",
        "showEasing": "swing",
        "hideEasing": "linear",
        "showMethod": "fadeIn",
        "hideMethod": "fadeOut"
    }

    $("#btnModalShow").click(function () {
        $("#linkPart").modal('show');
    });
});


$("#btnSubmitParts").on('click', function () {
    var record = "";
    var nothingChecked = $('#gridAvailableParts input[type=checkbox]:checked').length;
    if (nothingChecked === 1) {
        $("#gridAvailableParts input[type=checkbox]:checked").each(function () {
            var row = $(this).parent().closest('tr');
            record = {
                'id': row.find('td:nth-child(2)').text().trim(),
            };
        });
        debugger;
        if (document.getElementById("txtQuantity").value === "") {
            toastr.error("Please input quantity", "Error");
        }
        else {

            $.ajax({
                type: "POST",
                url: "/Parts/LinkPart",
                data: { //Passing data
                    quantity: $("#txtQuantity").val(), //Reading text box values using Jquery
                    parentPartId: '@ViewData["ParentId"]',
                    childPartId: record.id
                },
                success: function (response) {
                    if (response != null) {
                        toastr.success("Part linked successfully", "Success");

                        $('#tblPartListGrid').DataTable().ajax.reload();

                        $('#linkPart').modal("toggle")
                    } else {
                        alert("Something went wrong");
                    }
                },
                failure: function (response) {
                    alert("Something went wrong");
                },
                error: function (response) {
                    alert("Something went wrong");
                }
            });
        }

    } else {
        toastr.error("Please select a record", "Error");
    }

    return false;
});

</script>
